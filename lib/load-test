#!/bin/env python

# Copyright (c) 2021 TI Tokyo. All Rights Reserved.
#
# This file is provided to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file
# except in compliance with the License.  You may obtain
# a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# ---------------------------------------------------------------------

# Convenence script that discovers Riak CS nodes, reads the admin user
# credentials, and runs s3-benchmark against them.  Part of
# riak_cs_service_bundle.

import argparse, os, subprocess, multiprocessing
from bundle_lib import *

def load_test(s3_benchmark_path, s3_benchmark_params, do_parallel, rcs_hosts_with_creds):
    nproc = len(rcs_hosts_with_creds)
    if do_parallel:
        with multiprocessing.Pool(nproc) as p:
            p.starmap(load_test_on_node,
                      [(h, s3_benchmark_path, s3_benchmark_params, key, secret)
                       for (h, (key, secret)) in rcs_hosts_with_creds.items()])
        subprocess.run(['stty', 'sane'])
    else:
        for (h, (aws_key_id, aws_key_secret)) in rcs_hosts_with_creds:
            load_test_on_node(h, s3_benchmark_path, s3_benchmark_params, aws_key_id, aws_key_secret)


def load_test_on_node(rcs_host, s3_benchmark_path, s3_benchmark_params, aws_key_id, aws_key_secret):
    print("Running load test (%s %s -a %s -s %s) with Riak CS at %s:"
          % (s3_benchmark_path, s3_benchmark_params, aws_key_id, aws_key_secret, rcs_host))
    p = subprocess.run(env = {"http_proxy": "http://" + rcs_host + ":8080"},
                       args = [s3_benchmark_path, "-a", aws_key_id, "-s", aws_key_secret] + s3_benchmark_params.split(" "),
                       capture_output = True,
                       encoding = 'utf8')
    print("load test completed with code %d:\n%s\n%s" % (p.returncode, p.stderr, p.stdout))
    with open("load-test-report", mode="a") as f:
        print("""
-------------------------------------
RIAK_VSN=%s RIAK_CS_VSN=%s node=%s
%s
""" % (os.getenv("RIAK_VSN"), os.getenv("RIAK_CS_VSN"), rcs_host, p.stdout),
              file=f)

def get_rcs_user_creds(node):
    p = docker_exec_proc(node,
                         ["/opt/riak_cs_control/bin/riak_cs_control", "eval",
                          'io:format("~s ~s ~s\n", [riak_cs_control_configuration:cs_configuration(cs_admin_key),'
                          'riak_cs_control_configuration:cs_configuration(cs_admin_secret),'
                          'riak_cs_control_configuration:cs_configuration(cs_host)]).'])
    [key, secret, host, _] = p.stdout.strip("\n").split()
    return (host, (key, secret))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-x", "--executable", default = "../s3-benchmark/s3-benchmark", help = "path to benchmark executable")
    parser.add_argument("-O", "--options", default = "-t 3 -l 3 -d 5", help = "options to benchmark program")
    parser.add_argument("-p", "--parallel", action = "store_false", help = "run benchmarks against all riak_cs nodes in parallel")
    parser.add_argument("-n", "--docker_service_name", default = "rcs-tussle-one", help = "docker service name")
    args = parser.parse_args()

    tussle_name = args.docker_service_name

    rcs_nodes = discover_nodes(tussle_name, "riak_cs")
    rcsc_nodes = discover_nodes(tussle_name, "riak_cs_control")
    rcs_ext_ips = [find_external_ips(c["container"]) for c in rcs_nodes]
    creds = expand_to_all_rcs_nodes(
        dict([get_rcs_user_creds(n) for n in rcsc_nodes]),
        rcs_nodes)

    load_test(args.executable, args.options,
              args.parallel, dict(zip(rcs_ext_ips, [creds[n["ip"]] for n in rcs_nodes])))

if __name__ == "__main__":
    main()
