#!/bin/env python

# Copyright (c) 2021 TI Tokyo. All Rights Reserved.
#
# This file is provided to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file
# except in compliance with the License.  You may obtain
# a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# ---------------------------------------------------------------------

# Orchestration script for riak_cs_service_bundle. It is executed,
# with proper parameters, by make start and is not supposed to be used
# separately.


import json, sys, os, time, subprocess, multiprocessing, semver
from bundle_lib import *

# riak
# =======================

def check_preexisting_riak_data(nodes):
    have_old_data = False
    ni = 1
    for n in nodes:
        if docker_exec_proc_(n, ["stat", "/opt/riak/data/%d/cluster_meta" % ni]).returncode == 0:
            print("  deleting cluster_meta and ring dirs on", n["ip"])
            docker_exec_proc(n, ["rm", "-rf", "/opt/riak/data/%d/cluster_meta" % ni, "/opt/riak/data/%d/ring" % ni])
            have_old_data = True
        ni = ni + 1
    if have_old_data:
        print("Found preexisting data on Riak nodes")
    return have_old_data


def configure_riak_nodes(nodes):
    print("Configuring Riak nodes")
    ni = 1
    for n in nodes:
        print("  %d: %s" % (ni, n["ip"]))
        nodename = "riak@" + n["ip"]
        docker_exec_proc(n, ["sed", "-i", "-E",
                             "-e", "s|nodename = .+|nodename = %s|" % nodename,
                             "-e", "s|listener\.http\.internal = .+|listener.http.internal = 0.0.0.0:8098|",
                             "-e", "s|listener\.protobuf\.internal = .+|listener.protobuf.internal = 0.0.0.0:8087|",
                             "-e", "s|platform_data_dir = .+|platform_data_dir = /opt/riak/data/%d|" % ni,
                             "-e", "s|platform_log_dir = .+|platform_log_dir = /opt/riak/log/%d|" % ni,
                             "-e", "s|mdc\.data_root = .+|mdc.data_root = /opt/riak/data/%d/riak_repl|" % ni,
                             "-e", "s|mdc\.cluster_manager = .+|mdc.cluster_manager = 0.0.0.0:9080|",
                             "/opt/riak/etc/riak.conf"])
        docker_exec_proc(n, ["sed", "-i", "-E",
                             "-e", "s|/opt/riak/log|/opt/riak/log/%d|" % ni,
                             "-e", "s|\{data_root, \"\./data/riak_repl/\"\}|{data_root, \"/opt/riak/data/%d/riak_repl/\"}|" % ni,
                             "-e", "s|\{home, \"\./data/setup\"\}|{home, \"/opt/riak/data/%d/setup\"}|" % ni,
                             "/opt/riak/etc/advanced.config"])
        ni = ni + 1

def start_riak_nodes(nodes):
    print("Starting Riak nodes:", end = '')
    with multiprocessing.Pool(len(nodes)) as p:
        p.starmap(start_riak_node, [(nodes[i], i+1) for i in range(len(nodes))])
    subprocess.run(['stty', 'sane'])
    print()
    print("Waiting for riak cluster to become ready:", end = '')
    with multiprocessing.Pool(len(nodes)) as p:
        p.starmap(wait_for_services, [(nodes[i], i) for i in range(len(nodes))])
    subprocess.run(['stty', 'sane'])
    print()

def start_riak_node(node, i):
    time.sleep(i * .6)
    while True:
        p = docker_exec_proc_(node, ["/opt/riak/bin/riak", "start"])
        if p.returncode != 0:
            if p.stdout == "Node is already running!\n":
                print(" (%s)" % node["ip"], end = '', flush = True)
                return
            sys.exit("Failed to start riak node at %s: %s%s" % (node["ip"], p.stdout, p.stderr))
        p = docker_exec_proc_(node, ["/opt/riak/bin/riak", "ping"])
        if p.stdout == "pong\n":
            print(" [%s]" % node["ip"], end = '', flush = True)
            return
        time.sleep(.5)
        print(" ", end = '', flush = True)

def wait_for_services(node, i):
    riak_admin = _which_riak_admin()
    repeat = 30
    while repeat > 0:
        p = docker_exec_proc_(node, riak_admin + ["wait-for-service", "riak_kv"])
        if p.stdout == "riak_kv is up":
            break
        else:
            time.sleep(.5)
            repeat = repeat-1
    repeat = 30
    while repeat > 0:
        p = docker_exec_proc_(node, riak_admin + ["ringready"])
        if p.returncode == 0:
            break
        else:
            time.sleep(.5)
            repeat = repeat-1
    print(" [%s]" % node["ip"], end = '', flush = True)

def join_riak_nodes(nodes, topo):
    riak_admin = _which_riak_admin()
    for cluster in topo:
        clustering_node_ids = topo[cluster]
        clustering_nodes = [nodes[n-1] for n in clustering_node_ids]
        first = nodes[clustering_node_ids[0]-1]
        rest = [nodes[ni-1] for ni in clustering_node_ids[1:]]
        if rest == []:
            continue
        print("Joining nodes %s to %s" % ([n["ip"] for n in rest], first["ip"]))
        for n in rest:
            p = docker_exec_proc(n, riak_admin + ["cluster", "join", "riak@" + first["ip"]])
            print(p.stdout)
        for n in clustering_nodes:
            p = docker_exec_proc(n, riak_admin + ["cluster", "plan"])
            print(p.stdout)
        for n in rest:
            p = docker_exec_proc(n, riak_admin + ["cluster", "commit"])
            print(p.stdout)

def _which_riak_admin():
    vsn = semver.VersionInfo.parse(os.getenv("RIAK_VSN")[5:])
    if vsn.major == 2:
        return ["/opt/riak/bin/riak-admin"]
    elif vsn.major == 3:
        return ["/opt/riak/bin/riak", "admin"]
    else:
        return ["/opt/riak/bin/riak-admin"]


# riak_cs
# =======================

def preconfigure_rcs_nodes_with_standalone_stanchion(nodes_annotated):
    n = 1
    print("Configuring Riak CS nodes:")
    for (cn, rn, sn) in nodes_annotated:
        nodename = "riak_cs@" + cn["ip"]
        print("  %d: %s->%s->%s" % (n, cn["ip"], sn["ip"], rn["ip"]))
        docker_exec_proc(cn, ["sed", "-i", "-E",
                              "-e", "s|nodename = .+|nodename = %s|" % nodename,
                              "-e", "s|listener = .+|listener = 0.0.0.0:8080|",
                              "-e", "s|riak_host = .+|riak_host = %s:8087|" % rn["ip"],
                              "-e", "s|stanchion_host = .+|stanchion_host = %s:8085|" % sn["ip"],
                              "-e", "s|anonymous_user_creation = .+|anonymous_user_creation = off|",
                              "/opt/riak-cs/etc/riak-cs.conf"])
        n = n + 1
    print()

def preconfigure_rcs_nodes(nodes_annotated):
    network, mask = get_local_subnet()
    n = 1
    print("Configuring Riak CS nodes:")
    for (cn, rn) in nodes_annotated:
        nodename = "riak_cs@" + cn["ip"]
        print("  %d: %s->%s" % (n, cn["ip"], rn["ip"]))
        docker_exec_proc(cn, ["sed", "-i", "-E",
                              "-e", "s|nodename = .+|nodename = %s|" % nodename,
                              "-e", "s|listener = .+|listener = 0.0.0.0:8080|",
                              "-e", "s|riak_host = .+|riak_host = %s:8087|" % rn["ip"],
                              "-e", "s|anonymous_user_creation = .+|anonymous_user_creation = off|",
                              "-e", "s|stanchion\.listener = .+|stanchion.listener = %s:8085|" % find_external_ip(cn["container"]),
                              "-e", "s|stanchion_subnet = .+|stanchion_subnet = %s|" % network,
                              "-e", "s|stanchion_netmask = .+|stanchion_netmask = %s|" % mask,
                              "/opt/riak-cs/etc/riak-cs.conf"])
        n = n + 1
    print()


def enable_anon_user_creation(node):
    print("Enabling anonymous user creation on node", node["ip"])
    docker_exec_proc(node, ["sed", "-i", "-E",
                            "-e", "s|anonymous_user_creation = .+|anonymous_user_creation = on|",
                            "/opt/riak-cs/etc/riak-cs.conf"])

def enable_rcs_auth_bypass(node):
    print("Disabling admin auth on", node["ip"])
    docker_exec_proc(node, ["cp", "/opt/riak-cs/etc/advanced.config", "/opt/riak-cs/etc/advanced.config.backup"]).stdout
    docker_exec_proc(node, ["sed", "-zEie", "s/.+/[{riak_cs,[{admin_auth_enabled,false}]}]./", "/opt/riak-cs/etc/advanced.config"]).stdout


def restore_rcs_advanced_config(node):
    docker_exec_proc(node, ["mv", "/opt/riak-cs/etc/advanced.config.backup", "/opt/riak-cs/etc/advanced.config"])


def finalize_rcs_configs(nodes_annotated, auth_v4):
    print("Reonfiguring Riak CS nodes")
    if auth_v4:
        auth_v4_conf = "on"
        auth_v4_erl = "true"
    else:
        auth_v4_conf = "off"
        auth_v4_erl = "false"
    for (rn, (_,u)) in nodes_annotated:
        docker_exec_proc(rn, ["sed", "-i", "-E",
                              "-e", "s|anonymous_user_creation = on|anonymous_user_creation = off|",
                              "-e", "s|admin.key = .+|admin.key = %s|" % u["key_id"],
                              "-e", "s|auth_v4 = .+|auth_v4 = %s|" % auth_v4_conf,
                              "/opt/riak-cs/etc/riak-cs.conf"])
        # required for riak_cs 2.x
        docker_exec_proc(rn, ["sed", "-zEie", "s/.+/[{riak_cs,[{auth_v4_enabled,%s}]}]./" % auth_v4_erl,
                              "/opt/riak-cs/etc/advanced.config"]).stdout


def start_rcs_nodes(nodes, do_restart = False):
    print("Starting Riak CS nodes:", end = '')
    with multiprocessing.Pool(len(nodes)) as p:
        p.starmap(start_rcs_node, [(nodes[i], i, do_restart) for i in range(len(nodes))])
    subprocess.run(['stty', 'sane'])
    print()

def start_rcs_node(node, i, do_restart):
    time.sleep(i * .6)
    if do_restart:
        docker_exec_proc(node, ["/opt/riak-cs/bin/riak-cs", "stop"])
        print(" (%s)" % node["ip"], end = '', flush = True)
    while True:
        docker_exec_proc_(node, ["/opt/riak-cs/bin/riak-cs", "start"])
        p = docker_exec_proc_(node, ["/opt/riak-cs/bin/riak-cs", "ping"])
        if p.stdout == "pong\n":
            print(" [%s]" % node["ip"], end = '', flush = True)
            return
        time.sleep(.5)
        print(" ", end = '', flush = True)


# stanchion
# =======================

def preconfigure_stanchion_nodes(nodes_annotated):
    print("Configuring Stanchion nodes")
    for (sn, rn) in nodes_annotated:
        nodename = "stanchion@" + sn["ip"]
        docker_exec_proc(sn, ["sed", "-i", "-E",
                              "-e", "s|nodename = stanchion@127.0.0.1|nodename = %s|" % nodename,
                              "-e", "s|listener = 127.0.0.1:8085|listener = 0.0.0.0:8085|",
                              "-e", "s|riak_host = .+|riak_host = %s:8087|" % rn["ip"],
                              "/opt/stanchion/etc/stanchion.conf"])

def finalize_stanchion_configs(nodes_with_keys):
    print("Reconfiguring Stanchion nodes:")
    for (n, u) in nodes_with_keys:
        docker_exec_proc(n, ["sed", "-i", "-E",
                             "-e", "s|admin.key = .+|admin.key = %s|" % u["key_id"],
                             "/opt/stanchion/etc/stanchion.conf"])


def start_stanchion_nodes(nodes, do_restart = False):
    print("Starting Stanchion nodes:", end = '')
    with multiprocessing.Pool(len(nodes)) as p:
        p.starmap(start_stanchion_node, [(nodes[i], i, do_restart) for i in range(len(nodes))])
    subprocess.run(['stty', 'sane'])
    print()

def start_stanchion_node(node, i, do_restart):
    time.sleep(i * .6)
    if do_restart:
        docker_exec_proc(node, ["/opt/stanchion/bin/stanchion", "stop"])
        print(" (%s)" % node["ip"], end = '', flush = True)
    while True:
        docker_exec_proc_(node, ["/opt/stanchion/bin/stanchion", "start"])
        if docker_exec_proc_(node, ["/opt/stanchion/bin/stanchion", "ping"]).stdout == "pong\n":
            print(" [%s]" % node["ip"], end = '', flush = True)
            return
        time.sleep(.5)
        print(" ", end = '', flush = True)


# riak_cs_control
# =======================

def start_rcsc_nodes(nodes_annotated):
    print("Starting Riak CS Control nodes:", end = '')
    with multiprocessing.Pool(len(nodes_annotated)) as p:
        p.starmap(start_rcsc_node, [(nodes_annotated[i], i) for i in range(len(nodes_annotated))])
    subprocess.run(['stty', 'sane'])
    print()
def start_rcsc_node(node_annotated, i):
    time.sleep(i * .3)
    (node, rcs_node, user) = node_annotated
    while True:
        subprocess.run(args = ["docker", "exec", "-it",
                               "--env", "CS_HOST=" + rcs_node["ip"],
                               "--env", "CS_ADMIN_KEY=" + user["key_id"],
                               "--env", "CS_ADMIN_SECRET=" + user["key_secret"],
                               node["container"],
                               "/opt/riak_cs_control/bin/riak_cs_control", "daemon"])
        if "pong\n" == docker_exec_proc_(node, ["/opt/riak_cs_control/bin/riak_cs_control", "ping"]).stdout:
            return
        print(" ", flush = True, end = '')


def main():
    tussle_name = sys.argv[1]
    required_riak_nodes = int(os.getenv('N_RIAK_NODES'))
    required_rcs_nodes = int(os.getenv('N_RCS_NODES'))
    required_stanchion_nodes = int(os.getenv('N_STANCHION_NODES'))
    required_rcsc_nodes = int(os.getenv('N_RCSC_NODES'))
    auth_v4 = os.getenv('RCS_AUTH_V4')
    have_stanchion = rcs_needs_stanchion()

    print("Discovering nodes")
    riak_nodes = discover_nodes(tussle_name, "riak", required_riak_nodes)
    print("  riak:", ", ".join([n["ip"] for n in riak_nodes]))
    rcs_nodes = discover_nodes(tussle_name, "riak_cs", required_rcs_nodes)
    print("  riak_cs:", ", ".join([n["ip"] for n in rcs_nodes]))
    if have_stanchion == True:
        stanchion_nodes = discover_nodes(tussle_name, "stanchion", required_stanchion_nodes)
        print("  stanchion:", ", ".join([n["ip"] for n in stanchion_nodes]))
    else:
        stanchion_nodes = []
        print("  (no stanchion in this tussle)")
    rcsc_nodes = discover_nodes(tussle_name, "riak_cs_control", required_rcsc_nodes)
    print("  riak_cs_control:", ", ".join([n["ip"] for n in rcsc_nodes]))

    riak_topo, rcs_topo = get_topologies()

    riak_ext_ips = [find_external_ip(c["container"]) for c in riak_nodes]
    rcs_ext_ips = [find_external_ip(c["container"]) for c in rcs_nodes]
    rcsc_ext_ips = [find_external_ip(c["container"]) for c in rcsc_nodes]

    have_old_data = check_preexisting_riak_data(riak_nodes)

    configure_riak_nodes(riak_nodes)
    start_riak_nodes(riak_nodes)
    join_riak_nodes(riak_nodes, riak_topo)

    # first, we configure and start the tussle with
    # anonymous_user_creation = on in riak-cs.conf, strictly and
    # specifically to enable us to create an admin user
    if have_stanchion:
        preconfigure_rcs_nodes_with_standalone_stanchion(
            [(rcs_nodes[i-1],
              riak_nodes[rcs_topo[str(i)] - 1],
              stanchion_nodes[stanchion_node_id_for_rcs(i, riak_topo, rcs_topo) - 1])
             for i in range(1, 1+len(rcs_nodes))])
        preconfigure_stanchion_nodes(
            zip(stanchion_nodes,
                [riak_nodes[n[0]-1] for n in riak_topo.values()]))
        start_stanchion_nodes(
            stanchion_nodes)
    else:
        preconfigure_rcs_nodes(
            [(rcs_nodes[i-1],
              riak_nodes[rcs_topo[str(i)] - 1])
             for i in range(1, 1+len(rcs_nodes))])

    admin_users = {}
    if not have_old_data:
        admin_email = "admin@tussle.org"
        admin_name = "admin"
        for c in riak_topo.keys():
            rcs_node_id = get_one_rcs_node_id_for_riak_cluster(riak_topo[c], rcs_topo)
            if rcs_node_id is None:
                print("Cluster %s created but no Riak CS nodes are connected to it" % c)
                continue
            rcs_node = rcs_nodes[int(rcs_node_id)-1]
            enable_anon_user_creation(rcs_node)
            start_rcs_nodes([rcs_node])
            rcs_ext_ip = rcs_ext_ips[int(rcs_node_id) - 1]
            admin_user = create_user(rcs_ext_ip, admin_name, admin_email)
            print("\nOn Riak CS node %s (backed by %s), admin user (%s <%s>) with creds:\n"
                  "  key_id: %s\n  key_secret: %s\n"
                  % (rcs_ext_ip, c, admin_name, admin_email,
                     admin_user["key_id"], admin_user["key_secret"]))
            admin_users |= {rcs_node["ip"]: admin_user}
    else:
        if len(riak_topo) > 1:
            sys.exit("Resuming work is only supported for single-cluster topology")
        for c in riak_topo.keys():
            rcs_node_id = get_one_rcs_node_id_for_riak_cluster(riak_topo[c], rcs_topo)
            if rcs_node_id is None:
                print("Cluster %s created but no Riak CS nodes are connected to it" % c)
                continue
            rcs_node = rcs_nodes[int(rcs_node_id)-1]
            enable_rcs_auth_bypass(rcs_node)
            rcs_ext_ip = rcs_ext_ips[int(rcs_node_id) - 1]
            admin_user = get_admin_user(rcs_ext_ip)
            if not admin_user:
                sys.exit("Riak has data but a Riak CS admin user record was not found."
                         " Try make clean and make start again?")
            restore_rcs_advanced_config(rcs_nodes[0])
            print("\nOn Riak CS node %s (backed by %s), found previously created"
                  " admin user (%s <%s>) with creds:\n  key_id: %s\n  key_secret: %s\n"
                  % (rcs_ext_ip, c, admin_user["name"], admin_user["email"],
                     admin_user["key_id"], admin_user["key_secret"]))
            admin_users |= {rcs_node["ip"]: admin_user}

    if have_stanchion:
        finalize_stanchion_configs(
            zip(stanchion_nodes, admin_users.values()))
        start_stanchion_nodes(
            stanchion_nodes, do_restart = True)

    finalize_rcs_configs(
        zip(rcs_nodes, expand_to_all_rcs_nodes(admin_users, rcs_nodes).items()), auth_v4)
    start_rcs_nodes(
        rcs_nodes, do_restart = True)

    start_rcsc_nodes(
        [(n,
          rcs_nodes[get_one_rcs_node_id_for_riak_cluster(riak_topo[c], rcs_topo) - 1],
          u)
         for (c, n, (_,u)) in zip(riak_topo.keys(), rcsc_nodes, admin_users.items())])

    print("\nRiak clusters and addresses:")
    for c in riak_topo.keys():
        print("  %s:" % c)
        for i in riak_topo[c]:
            print("    %s (%s)" % (riak_ext_ips[i-1], riak_nodes[i-1]["ip"]))
    print("\nRiak CS addresses and connections:")
    for i in rcs_topo.keys():
        print("  %s (%s) -> %s" % (rcs_ext_ips[int(i)-1], rcs_nodes[int(i)-1]["ip"], riak_ext_ips[rcs_topo[i]-1]))
    print("\nRiak CS Control addresses:")
    for i in rcsc_ext_ips:
        print("  %s" % i)


if __name__ == "__main__":
    main()
