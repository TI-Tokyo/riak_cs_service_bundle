#!/usr/bin/env python

import json, sys, os, time, subprocess, multiprocessing
from bundle_lib import discover_nodes, find_external_ips, docker_exec_proc, create_user, get_admin_user

# riak
# =======================

def check_preexisting_riak_data(nodes):
    have_old_data = False
    ni = 1
    for n in nodes:
        if docker_exec_proc(n, ["stat", "/opt/riak/data/%d/cluster_meta" % ni]).returncode == 0:
            #old_ip = docker_exec_proc(n, ["sed", "-nEe", "s/nodename = riak@(.+)/\1/p", "/etc/riak/riak.conf"]).stdout
            #print("  reip", old_ip, "to", n["ip"])
            #if docker_exec_proc(n, ["riak", "admin", "reip", "riak@" + old_ip, "riak@" + n["ip"]]).
            print("  deleting cluster_meta and ring dirs on", n["ip"])
            docker_exec_proc(n, ["rm", "-rf", "/opt/riak/data/%d/cluster_meta" % ni, "/opt/riak/data/%d/ring" % ni])
            have_old_data = True
        ni = ni + 1
    if have_old_data:
        print("Found preexisting data on Riak nodes")
    return have_old_data


def configure_riak_nodes(nodes):
    print("Configuring Riak nodes")
    ni = 1
    for n in nodes:
        p = docker_exec_proc(n, ["mkdir", "-p", "/opt/riak/data/%d" % ni])
        if p.returncode != 0:
            sys.exit("Failed to create data dir on riak node at %s: %s%s" % (n["ip"], p.stdout, p.stderr))
        p = docker_exec_proc(n, ["mkdir", "-p", "/opt/riak/log/%d" % ni])
        if p.returncode != 0:
            sys.exit("Failed to create log dir on riak node at %s: %s%s" % (n["ip"], p.stdout, p.stderr))
        #p = docker_exec_proc(n, ["chown", "-R", "riak:riak", "/var/lib/riak/data", "/var/log/riak"])
        #if p.returncode != 0:
        #    sys.exit("Failed to chown data or log dir on riak node at %s: %s%s" % (n["ip"], p.stdout, p.stderr))
        nodename = "riak@" + n["ip"]
        p1 = docker_exec_proc(n, ["sed", "-i", "-E",
                                  "-e", "s|nodename = riak@127.0.0.1|nodename = %s|" % nodename,
                                  "-e", "s|listener.http.internal = .+|listener.http.internal = 0.0.0.0:8098|",
                                  "-e", "s|listener.protobuf.internal = .+|listener.protobuf.internal = 0.0.0.0:8087|",
                                  "-e", "s|platform_data_dir = .+|platform_data_dir = /opt/riak/data/%d|" % ni,
                                  "-e", "s|mdc.data_root = .+|mdc.data_root = /opt/riak/data/%d/riak_repl|" % ni,
                                  "-e", "s|platform_log_dir = .+|platform_log_dir = /opt/riak/log/%d|" % ni,
                                  "/opt/riak/etc/riak.conf"])
        p2 = docker_exec_proc(n, ["sed", "-i", "-E",
                                  "-e", "s|/opt/riak/log|/opt/riak/log/%d|" % ni,
                                  "/opt/riak/etc/advanced.config"])
        if p1.returncode != 0 or p2.returncode != 0:
            sys.exit("Failed to configure riak node at %s: %s%s" % (n["ip"], p.stdout, p.stderr))
        ni = ni + 1

def start_riak_nodes(nodes):
    print("Starting Riak nodes:", end = '')
    with multiprocessing.Pool(len(nodes)) as p:
        p.starmap(start_riak_node, [(nodes[i], i+1) for i in range(len(nodes))])
    subprocess.run(['stty', 'sane'])
    print()
    print("Waiting for riak cluster to become ready:", end = '')
    with multiprocessing.Pool(len(nodes)) as p:
        p.starmap(wait_for_services, [(nodes[i], i+1) for i in range(len(nodes))])
    subprocess.run(['stty', 'sane'])
    print()

def start_riak_node(node, i):
    p = docker_exec_proc(node, ["/opt/riak/bin/riak", "start"])
    if p.returncode != 0:
        if p.stdout == "Node is already running!\n":
            print(" (%d)" % i, end = '', flush = True)
            return
        sys.exit("Failed to start riak node at %s: %s%s" % (node["ip"], p.stdout, p.stderr))
    print(" [%d]" % i, end = '', flush = True)

def wait_for_services(node, i):
    nodename = "riak@" + node["ip"]
    repeat = 10
    while repeat > 0:
        p = docker_exec_proc(node, ["/opt/riak/bin/riak", "admin", "wait-for-service", "riak_kv"])
        if p.stdout == "riak_kv is up\n":
            break
        else:
            time.sleep(1)
            repeat = repeat-1
    repeat = 10
    while repeat > 0:
        p = docker_exec_proc(node, ["/opt/riak/bin/riak", "admin", "ringready"])
        if p.returncode == 0:
            break
        else:
            time.sleep(1)
            repeat = repeat-1
    print(" [%d]" % i, end = '', flush = True)

def which_riak_admin():
    vsn = os.getenv("RIAK_VSN")[0]
    if vsn == "2":
        return ["/opt/riak/bin/riak-admin"]
    if vsn == "3":
        return ["/opt/riak/bin/riak", "admin"]

def join_riak_nodes(nodes, topo):
    if topo["cluster1"] == "all":
        join_riak_nodes_custom(nodes, {"cluster1": range(len(nodes))})
    else:
        join_riak_nodes_custom(nodes, topo)

def join_riak_nodes_custom(all_nodes, topo):
    riak_admin = which_riak_admin()
    for cluster in topo:
        clustering_node_ids = topo[cluster]
        clustering_nodes = [all_nodes[n-1] for n in clustering_node_ids]
        first = all_nodes[clustering_node_ids[0]-1]
        rest = [all_nodes[ni-1] for ni in clustering_node_ids[1:]]
        print("Joining nodes %s to %s" % ([n["ip"] for n in rest], first["ip"]))
        for n in rest:
            p = docker_exec_proc(n, riak_admin + ["cluster", "join", "riak@" + first["ip"]])
            if p.returncode != 0:
                sys.exit("Failed to execute a join command on node %s (%s): %s%s" %
                         (n["container"], n["ip"], p.stdout, p.stderr))
            print(p.stdout)
        for n in clustering_nodes:
            p = docker_exec_proc(n, riak_admin + ["cluster", "plan"])
            if p.returncode != 0:
                sys.exit("Failed to execute a join command on node %s (%s): %s%s" % (n["container"], n["ip"], p.stdout, p.stderr))
            print(p.stdout)
        for n in rest:
            p = docker_exec_proc(n, riak_admin + ["cluster", "commit"])
            if p.returncode != 0:
                sys.exit("Failed to execute a join command on node %s (%s): %s%s" % (n["container"], n["ip"], p.stdout, p.stderr))
            print(p.stdout)


# riak_cs
# =======================

def preconfigure_rcs_nodes(rcs_nodes, riak_nodes, stanchion_node, topo):
    n = 1
    print("Configuring Riak CS nodes:", end = '')
    for rn in rcs_nodes:
        nodename = "riak_cs@" + rn["ip"]
        if str(n) not in topo.keys():
            continue
        m = topo[str(n)]
        print(" %d->%d" % (n, m), end = '')
        p = docker_exec_proc(rn, ["sed", "-i", "-E",
                                  "-e", "s|nodename = .+|nodename = %s|" % nodename,
                                  "-e", "s|listener = .+|listener = 0.0.0.0:8080|",
                                  "-e", "s|riak_host = .+|riak_host = %s:8087|" % riak_nodes[m-1]["ip"],
                                  "-e", "s|stanchion_host = .+|stanchion_host = %s:8085|" % stanchion_node["ip"],
                                  "-e", "s|anonymous_user_creation = .+|anonymous_user_creation = off|",
                                  "/opt/riak-cs/etc/riak-cs.conf"])
        if p.returncode != 0:
            sys.exit("Failed to modify riak-cs.conf node at %s: %s%s" % (rn["ip"], p.stdout, p.stderr))
        n = n + 1
    print()

def enable_anon_user_creation(node):
    print("Enabling anonymous user creation on node", node["ip"])
    p = docker_exec_proc(node, ["sed", "-i", "-E",
                                "-e", "s|anonymous_user_creation = .+|anonymous_user_creation = on|",
                                "/opt/riak-cs/etc/riak-cs.conf"])
    if p.returncode != 0:
        sys.exit("Failed to modify riak-cs.conf node at %s: %s%s" % (rn["ip"], p.stdout, p.stderr))

def enable_rcs_auth_bypass(node):
    print("Disabling admin auth on", node["ip"])
    docker_exec_proc(node, ["cp", "/opt/riak-cs/etc/advanced.config", "/opt/riak-cs/etc/advanced.config.backup"]).stdout
    docker_exec_proc(node, ["sed", "-zEie", "s/.+/[{riak_cs,[{admin_auth_enabled,false}]}]./", "/opt/riak-cs/etc/advanced.config"]).stdout

def restore_rcs_advanced_config(node):
    docker_exec_proc(node, ["mv", "/opt/riak-cs/etc/advanced.config.backup", "/opt/riak-cs/etc/advanced.config"])

def finalize_rcs_config(rcs_nodes, admin_key_id, auth_v4):
    print("Reonfiguring Riak CS nodes")
    if auth_v4:
        auth_v4_erl = "true"
    else:
        auth_v4_erl = "false"
    for rn in rcs_nodes:
        p = docker_exec_proc(rn, ["sed", "-i", "-E",
                                  "-e", "s|anonymous_user_creation = on|anonymous_user_creation = off|",
                                  "-e", "s|admin.key = .+|admin.key = %s|" % admin_key_id,
                                  "/opt/riak-cs/etc/riak-cs.conf"])
        if p.returncode != 0:
            sys.exit("Failed to modify riak-cs.conf node at %s: %s%s" % (rn["ip"], p.stdout, p.stderr))
        docker_exec_proc(rn, ["sed", "-zEie", "s/.+/[{riak_cs,[{auth_v4_enabled,%s}]}]./" % auth_v4_erl,
                              "/opt/riak-cs/etc/advanced.config"]).stdout


def start_rcs_nodes(nodes, do_restart = False):
    print("Starting Riak CS nodes:", end = '')
    with multiprocessing.Pool(len(nodes)) as p:
        p.starmap(start_rcs_node, [(nodes[i], i+1, do_restart) for i in range(len(nodes))])
    subprocess.run(['stty', 'sane'])
    print()

def start_rcs_node(node, i, do_restart):
    if do_restart:
        p = docker_exec_proc(node, ["/opt/riak-cs/bin/riak-cs", "stop"])
        print(" (%d)" % i, end = '', flush = True)
    p = docker_exec_proc(node, ["/opt/riak-cs/bin/riak-cs", "start"])
    if p.returncode != 0:
        sys.exit("Failed to start Riak CS at %s: %s%s" % (node["ip"], p.stdout, p.stderr))
    print(" [%d]" % i, end = '', flush = True)



# stanchion
# =======================

def preconfigure_stanchion_node(stanchion_node, riak_nodes):
    nodename = "stanchion@" + stanchion_node["ip"]
    print("Configuring Stanchion node")
    p = docker_exec_proc(stanchion_node, ["sed", "-i", "-E",
                                          "-e", "s|nodename = riak@127.0.0.1|nodename = %s|" % nodename,
                                          "-e", "s|listener = 127.0.0.1:8085|listener = 0.0.0.0:8085|",
                                          "-e", "s|riak_host = .+|riak_host = %s:8087|" % riak_nodes[0]["ip"],
                                          "/opt/stanchion/etc/stanchion.conf"])
    if p.returncode != 0:
        sys.exit("Failed to modify stanchion.conf node at %s: %s%s" % (stanchion_node["ip"], p.stdout, p.stderr))

def finalize_stanchion_config(stanchion_node, admin_key_id):
    print("Reconfiguring Stanchion node")
    p = docker_exec_proc(stanchion_node, ["sed", "-i", "-E",
                                          "-e", "s|admin.key = .+|admin.key = %s|" % admin_key_id,
                                          "/opt/stanchion/etc/stanchion.conf"])
    if p.returncode != 0:
        sys.exit("Failed to modify stanchion.conf node at %s: %s%s" % (stanchion_node["ip"], p.stdout, p.stderr))



def start_stanchion_node(node, do_restart = False):
    if do_restart:
        print("Stopping Stanchion at node", node["ip"])
        p = docker_exec_proc(node, ["/opt/stanchion/bin/stanchion", "stop"])
    print("Starting Stanchion at node", node["ip"])
    p = docker_exec_proc(node, ["/opt/stanchion/bin/stanchion", "start"])
    if p.returncode != 0:
        sys.exit("Failed to start Stanchion at %s: %s%s" % (node["ip"], p.stdout, p.stderr))



# riak_cs_control
# =======================

def start_rcs_control(node, rcs_ip, user):
    p = subprocess.run(args = ["docker", "exec", "-it",
                               "--env", "CS_HOST=" + rcs_ip,
                               "--env", "CS_ADMIN_KEY=" + user["key_id"],
                               "--env", "CS_ADMIN_SECRET=" + user["key_secret"],
                               node["container"],
                               "/opt/riak_cs_control/bin/riak_cs_control", "daemon"],
                       capture_output = True,
                       encoding = "utf8")
    print(p.stdout, p.stderr)


def main():
    tussle_name = sys.argv[1]
    required_riak_nodes = int(sys.argv[2])
    required_rcs_nodes = int(sys.argv[3])
    auth_v4 = sys.argv[4]
    riak_topo_from = sys.argv[5]
    rcs_topo_from = sys.argv[6]

    print("Discovering nodes")
    riak_nodes = discover_nodes(tussle_name, "riak", required_riak_nodes)
    print("  riak nodes:", [n["ip"] for n in riak_nodes])
    rcs_nodes = discover_nodes(tussle_name, "riak_cs", required_rcs_nodes)
    print("  riak_cs nodes:", [n["ip"] for n in rcs_nodes])
    stanchion_nodes = discover_nodes(tussle_name, "stanchion", 1)
    print("  stanchion node:", stanchion_nodes[0]["ip"])
    rcsc_nodes      = discover_nodes(tussle_name, "riak_cs_control", 1)
    print("  riak_cs_control node:", rcsc_nodes[0]["ip"])

    try:
        with open(riak_topo_from) as f:
            riak_topo = json.load(f)
    except:
        riak_topo = {"cluster1": list(range(1, len(riak_nodes)))}
    try:
        with open(rcs_topo_from) as f:
            rcs_topo = json.load(f)
    except:
        rcs_topo = {str(x):wrap(x, len(riak_nodes)) for x in range(1, 1+len(rcs_nodes))}

    riak_ext_ips = [find_external_ips(c["container"]) for c in riak_nodes]
    rcs_ext_ips = [find_external_ips(c["container"]) for c in rcs_nodes]
    rcsc_ext_ip = find_external_ips(rcsc_nodes[0]["container"])

    have_old_data = check_preexisting_riak_data(riak_nodes)

    configure_riak_nodes(riak_nodes)
    start_riak_nodes(riak_nodes)
    if len(riak_nodes) > 1:
        join_riak_nodes(riak_nodes, riak_topo)

    preconfigure_rcs_nodes(rcs_nodes, riak_nodes, stanchion_nodes[0], rcs_topo)
    preconfigure_stanchion_node(stanchion_nodes[0], riak_nodes)
    start_stanchion_node(stanchion_nodes[0])

    if not have_old_data:
        enable_anon_user_creation(rcs_nodes[0])
        start_rcs_nodes([rcs_nodes[0]])
        admin_email = "admin@tussle.org"
        admin_name = "admin"
        admin_user = create_user(rcs_ext_ips[0], admin_name, admin_email)
        print("\nAdmin user (%s <%s>) creds:\n  key_id: %s\n  key_secret: %s\n"
              % (admin_name, admin_email,
                 admin_user["key_id"], admin_user["key_secret"]))
    else:
        enable_rcs_auth_bypass(rcs_nodes[0])
        start_rcs_nodes([rcs_nodes[0]], do_restart = True)
        admin_user = get_admin_user(rcs_ext_ips[0])
        if not admin_user:
            sys.exit("Riak has data but a Riak CS admin user record was found. Try make clean and make start again?")
        restore_rcs_advanced_config(rcs_nodes[0])
        print("\nPreviously created admin user (%s <%s>) creds:\n  key_id: %s\n  key_secret: %s\n"
              % (admin_user["name"], admin_user["email"],
                 admin_user["key_id"], admin_user["key_secret"]))

    finalize_stanchion_config(stanchion_nodes[0], admin_user["key_id"])
    start_stanchion_node(stanchion_nodes[0], do_restart = True)
    finalize_rcs_config(rcs_nodes, admin_user["key_id"], auth_v4)
    start_rcs_nodes(rcs_nodes, do_restart = True)

    start_rcs_control(rcsc_nodes[0], rcs_nodes[0]["ip"], admin_user)

    print("\nRiak clusters and addresses:")
    for c in riak_topo.keys():
        print("  %s:" % c)
        for i in riak_topo[c]:
            print("    %s (%s)" % (riak_ext_ips[i-1], riak_nodes[i-1]["ip"]))
    print("\nRiak CS external addresses and connections:")
    for i in rcs_topo.keys():
        print("  %s (%s) -> %s" % (rcs_ext_ips[int(i)-1], rcs_nodes[int(i)-1]["ip"], riak_ext_ips[rcs_topo[i]-1]))
    print("\nRiak CS Control external address:\n  %s" % rcsc_ext_ip)

def wrap(x, X):
    if x > X:
        return wrap(x - X, X)
    else:
        return x


if __name__ == "__main__":
    main()
